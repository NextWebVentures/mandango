<?php

    /**
     * Update the value of the reference fields.
     */
    public function updateReferenceFields()
    {
{# inheritance #}
{% if config_class.inheritance %}
        parent::updateReferenceFields();

{% endif %}
{# references one #}
{% for name, reference in config_class.referencesOne %}
{% if reference.inherited is not defined or not reference.inherited %}
{# normal (not polymorphic) #}
{% if reference.class is defined %}
        if (isset($this->data['referencesOne']['{{ name }}']) && !isset($this->data['fields']['{{ reference.field }}'])) {
{% if reference.dbref is defined %}
            $value = $this->data['referencesOne']['{{ name }}'];
            $reference = \MongoDBRef::create($value->getRepository()->getCollectionName(), $value->getId());
{% else %}
            $reference = $this->data['referencesOne']['{{ name }}']->getId();
{% endif %}
            $this->set{{ reference.field|ucfirst }}($reference);
        }
{# polymorphic #}
{% else %}
        if (isset($this->data['referencesOne']['{{ name }}']) && !isset($this->data['fields']['{{ reference.field }}'])) {
            $document = $this->data['referencesOne']['{{ name }}'];
{% if reference.discriminatorMap %}
            if (false === $discriminatorValue = array_search(get_class($document), {{ reference.discriminatorMap|var_export }})) {
                throw new \RuntimeException(sprintf('The class "%s" is not a possible reference in the reference "{{ name }}" of the class "{{ class }}".', get_class($document)));
            }
{% else %}
            $discriminatorValue = get_class($document);
{% endif %}
{% if reference.dbref is defined %}
            $reference = \MongoDBRef::create($document->getRepository()->getCollectionName(), $document->getId());
            $reference['{{ reference.discriminatorField }}'] = $discriminatorValue;
{% else %}
            $reference = array(
                '{{ reference.discriminatorField }}' => $discriminatorValue,
                'id' => $document->getId(),
            );
{% endif %}
            $this->set{{ reference.field|ucfirst }}($reference);
        }
{% endif %}
{% endif %}
{% endfor %}
{# references many #}
{% for name, reference in config_class.referencesMany %}
{% if reference.inherited is not defined or not reference.inherited %}
{# normal (not polymorphic) #}
{% if reference.class is defined %}
        if (isset($this->data['referencesMany']['{{ name }}'])) {
            $group = $this->data['referencesMany']['{{ name }}'];
            $add = $group->getAdd();
            $remove = array_map(function ($document) {
                return $document->getId();
            }, $group->getRemove());

            if ($add || $remove) {
                $ids = $this->get{{ reference.field|ucfirst }}();
{# dbref @ references many #}
{% if reference.dbref is defined %}
                foreach ($add as $document) {
                    $ids[] = \MongoDBRef::create($document->getRepository()->getCollectionName(), $document->getId());
                }
                $ids = array_filter($ids, function ($dbref) use ($remove) {
                    return !in_array($dbref['$id'], $remove);
                });
{% else %}
                foreach ($add as $document) {
                    $ids[] = $document->getId();
                }
                foreach ($remove as $id) {
                    if (false !== $key = array_search($id, $ids)) {
                        unset($ids[$key]);
                    }
                }
{% endif %}
                $this->set{{ reference.field|ucfirst }}($ids ? array_values($ids) : null);
            }
        }
{# polymorphic #}
{% else %}
        if (isset($this->data['referencesMany']['{{ name }}'])) {
            $group = $this->data['referencesMany']['{{ name }}'];
            $add = $group->getAdd();
            $remove = array_map(function ($document) {
                return $document->getId();
            }, $group->getRemove());
            if ($add || $remove) {
{% if reference.discriminatorMap %}
                $discriminatorMapValues = {{ reference.discriminatorMap|var_export }};
{% endif %}
                $ids = $this->get{{ reference.field|ucfirst }}();
                foreach ($add as $document) {
{% if reference.discriminatorMap %}
                    if (false === $discriminatorValue = array_search(get_class($document), $discriminatorMapValues)) {
                        throw new \RuntimeException(sprintf('The class "%s" is not a possible reference in the reference "{{ name }}" of the class "{{ class }}".', get_class($document)));
                    }
{% else %}
                    $discriminatorValue = get_class($document);
{% endif %}
{% if reference.dbref is defined %}
                    $reference = \MongoDBRef::create($document->getRepository()->getCollectionName(), $document->getId());
                    $reference['{{ reference.discriminatorField }}'] = $discriminatorValue;
                    $ids[] = $reference;
{% else %}
                    $ids[] = array(
                        '{{ reference.discriminatorField }}' => $discriminatorValue,
                        'id' => $document->getId(),
                    );
{% endif %}
                }

                $ids = array_filter($ids, function ($dbref) use ($remove) {
{# dbref @ polimorfic references many #}
{% if reference.dbref is defined %}
                    return !in_array($dbref['$id'], $remove);
{% else %}
                    return !in_array($dbref['id'], $remove);
{% endif %}
                });

                $this->set{{ reference.field|ucfirst }}($ids ? array_values($ids) : null);
            }
        }
{% endif %}
{% endif %}
{% endfor %}
{# embeddeds one #}
{% for name, embedded in config_class.embeddedsOne %}
{% if embedded.inherited is not defined or not embedded.inherited %}
{% if config_classes[embedded.class]['_has_references'] %}
        if (isset($this->data['embeddedsOne']['{{ name }}'])) {
            $this->data['embeddedsOne']['{{ name }}']->updateReferenceFields();
        }
{% endif %}
{% endif %}
{% endfor %}
{# embeddeds many #}
{% for name, embedded in config_class.embeddedsMany %}
{% if embedded.inherited is not defined or not embedded.inherited %}
{% if config_classes[embedded.class]['_has_references'] %}
        if (isset($this->data['embeddedsMany']['{{ name }}'])) {
            $group = $this->data['embeddedsMany']['{{ name }}'];
            foreach ($group->getSaved() as $document) {
                $document->updateReferenceFields();
            }
        }
{% endif %}
{% endif %}
{% endfor %}
    }
